name: CI/CD con Docker Compose

on:
  push:
    branches:
      - main2
  pull_request:
    branches:
      - main

jobs:
  construir_y_probar:
    runs-on: ubuntu-latest

    services:
      base_de_datos:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: shopdb
        ports:
          - 5432:5432
      cola_de_mensajes:
        image: rabbitmq:management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Descargar código
        uses: actions/checkout@v3

      - name: Verificar Docker y Docker Compose
        run: |
          docker --version
          docker compose version
      - name: Construir y levantar contenedores
        run: docker compose up -d --build

      - name: Esperar a que los servicios se inicien
        run: sleep 10

      - name: Verificar contenedores en ejecución
        run: docker ps

      - name: Esperar a PostgreSQL
        run: ./wait-for-it.sh postgres:5432 -- echo "PostgreSQL está listo"

      - name: Verificar si rails_app está corriendo
        run: |
          STATUS=$(docker inspect -f '{{.State.Status}}' rails_app || echo "notfound")
          if [ "$STATUS" != "running" ]; then
            echo "rails_app no está corriendo. Estado actual: $STATUS"
            docker ps  # Mostrar los contenedores en ejecución para depuración
            exit 1
          fi
      - name: Verificar conexión a PostgreSQL desde Rails
        run: |
          docker compose exec -T rails_app bash -c 'bundle exec rails runner "puts ActiveRecord::Base.connection.active? ? \"Connected!\" : \"Not connected!\""' || exit 1
      - name: Ejecutar migraciones de Rails
        run: docker compose exec -T rails_app bash -c "bundle exec rails db:migrate"

      - name: Ver logs de Rails en caso de error
        if: failure()
        run: docker compose logs rails_app

      - name: Ver logs de Flask en caso de error
        if: failure()
        run: docker compose logs python_app

      - name: Verificar logs de Rails
        run: docker compose logs rails_app

      - name: Mostrar logs de todos los servicios
        run: docker compose logs

      - name: Apagar los contenedores
        if: always()
        run: docker compose down

      - name: Caché de dependencias
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.bundle
          key: ${{ runner.os }}-build-${{ hashFiles('**/Gemfile.lock', '**/package-lock.json', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-
